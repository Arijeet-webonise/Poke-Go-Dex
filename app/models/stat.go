// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Stat represents a row from 'public.stats'.
type Stat struct {
	ID        int           `json:"id"`         // id
	Speed     sql.NullInt64 `json:"speed"`      // speed
	SpAttack  sql.NullInt64 `json:"sp_attack"`  // sp_attack
	SpDefence sql.NullInt64 `json:"sp_defence"` // sp_defence
	Attack    sql.NullInt64 `json:"attack"`     // attack
	Defence   sql.NullInt64 `json:"defence"`    // defence
	Hp        sql.NullInt64 `json:"hp"`         // hp

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Stat exists in the database.
func (s *Stat) Exists() bool {
	return s._exists
}

// Deleted provides information if the Stat has been deleted from the database.
func (s *Stat) Deleted() bool {
	return s._deleted
}

// Insert inserts the Stat to the database.
func (s *Stat) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.stats (` +
		`id, speed, sp_attack, sp_defence, attack, defence, hp` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)`

	// run query
	XOLog(sqlstr, s.ID, s.Speed, s.SpAttack, s.SpDefence, s.Attack, s.Defence, s.Hp)
	err = db.QueryRow(sqlstr, s.ID, s.Speed, s.SpAttack, s.SpDefence, s.Attack, s.Defence, s.Hp).Scan(&s.ID)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Update updates the Stat in the database.
func (s *Stat) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.stats SET (` +
		`speed, sp_attack, sp_defence, attack, defence, hp` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE id = $7`

	// run query
	XOLog(sqlstr, s.Speed, s.SpAttack, s.SpDefence, s.Attack, s.Defence, s.Hp, s.ID)
	_, err = db.Exec(sqlstr, s.Speed, s.SpAttack, s.SpDefence, s.Attack, s.Defence, s.Hp, s.ID)
	return err
}

// Save saves the Stat to the database.
func (s *Stat) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Upsert performs an upsert for Stat.
//
// NOTE: PostgreSQL 9.5+ only
func (s *Stat) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.stats (` +
		`id, speed, sp_attack, sp_defence, attack, defence, hp` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, speed, sp_attack, sp_defence, attack, defence, hp` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.speed, EXCLUDED.sp_attack, EXCLUDED.sp_defence, EXCLUDED.attack, EXCLUDED.defence, EXCLUDED.hp` +
		`)`

	// run query
	XOLog(sqlstr, s.ID, s.Speed, s.SpAttack, s.SpDefence, s.Attack, s.Defence, s.Hp)
	_, err = db.Exec(sqlstr, s.ID, s.Speed, s.SpAttack, s.SpDefence, s.Attack, s.Defence, s.Hp)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Delete deletes the Stat from the database.
func (s *Stat) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.stats WHERE id = $1`

	// run query
	XOLog(sqlstr, s.ID)
	_, err = db.Exec(sqlstr, s.ID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// GetAllStats returns all rows from 'public.stats',
// ordered by "created_at" in descending order.
func GetAllStats(db XODB) ([]*Stat, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.stats`

	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Stat
	for q.Next() {
		s := Stat{}

		// scan
		err = q.Scan(&s.ID, &s.Speed, &s.SpAttack, &s.SpDefence, &s.Attack, &s.Defence, &s.Hp)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

// GetChunkedStats returns pagingated rows from 'public.stats',
// ordered by "created_at" in descending order.
func GetChunkedStats(db XODB, limit int, offset int) ([]*Stat, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.stats LIMIT $1 OFFSET $2`

	q, err := db.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Stat
	for q.Next() {
		s := Stat{}

		// scan
		err = q.Scan(&s.ID, &s.Speed, &s.SpAttack, &s.SpDefence, &s.Attack, &s.Defence, &s.Hp)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

// StatByID retrieves a row from 'public.stats' as a Stat.
//
// Generated from index 'stats_pkey'.
func StatByID(db XODB, id int) (*Stat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, speed, sp_attack, sp_defence, attack, defence, hp ` +
		`FROM public.stats ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	s := Stat{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&s.ID, &s.Speed, &s.SpAttack, &s.SpDefence, &s.Attack, &s.Defence, &s.Hp)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
