// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Pokemon represents a row from 'public.pokemon'.
type Pokemon struct {
	ID                     int             `json:"id"`                       // id
	Name                   sql.NullString  `json:"name"`                     // name
	BaseExperience         sql.NullFloat64 `json:"base_experience"`          // base_experience
	Height                 sql.NullFloat64 `json:"height"`                   // height
	IsDefault              sql.NullBool    `json:"is_default"`               // is_default
	Weight                 sql.NullFloat64 `json:"weight"`                   // weight
	Ability                sql.NullString  `json:"ability"`                  // ability
	Forms                  sql.NullString  `json:"forms"`                    // forms
	GameIndices            sql.NullString  `json:"game_indices"`             // game_indices
	HeldItems              sql.NullString  `json:"held_items"`               // held_items
	LocationAreaEncounters sql.NullString  `json:"location_area_encounters"` // location_area_encounters
	Stats                  sql.NullString  `json:"stats"`                    // stats
	Types                  sql.NullString  `json:"types"`                    // types

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Pokemon exists in the database.
func (p *Pokemon) Exists() bool {
	return p._exists
}

// Deleted provides information if the Pokemon has been deleted from the database.
func (p *Pokemon) Deleted() bool {
	return p._deleted
}

// Insert inserts the Pokemon to the database.
func (p *Pokemon) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.pokemon (` +
		`id, name, base_experience, height, is_default, weight, ability, forms, game_indices, held_items, location_area_encounters, stats, types` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.Name, p.BaseExperience, p.Height, p.IsDefault, p.Weight, p.Ability, p.Forms, p.GameIndices, p.HeldItems, p.LocationAreaEncounters, p.Stats, p.Types)
	err = db.QueryRow(sqlstr, p.ID, p.Name, p.BaseExperience, p.Height, p.IsDefault, p.Weight, p.Ability, p.Forms, p.GameIndices, p.HeldItems, p.LocationAreaEncounters, p.Stats, p.Types).Scan(&p.ID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Pokemon in the database.
func (p *Pokemon) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.pokemon SET (` +
		`name, base_experience, height, is_default, weight, ability, forms, game_indices, held_items, location_area_encounters, stats, types` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) WHERE id = $13`

	// run query
	XOLog(sqlstr, p.Name, p.BaseExperience, p.Height, p.IsDefault, p.Weight, p.Ability, p.Forms, p.GameIndices, p.HeldItems, p.LocationAreaEncounters, p.Stats, p.Types, p.ID)
	_, err = db.Exec(sqlstr, p.Name, p.BaseExperience, p.Height, p.IsDefault, p.Weight, p.Ability, p.Forms, p.GameIndices, p.HeldItems, p.LocationAreaEncounters, p.Stats, p.Types, p.ID)
	return err
}

// Save saves the Pokemon to the database.
func (p *Pokemon) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Pokemon.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Pokemon) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.pokemon (` +
		`id, name, base_experience, height, is_default, weight, ability, forms, game_indices, held_items, location_area_encounters, stats, types` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, base_experience, height, is_default, weight, ability, forms, game_indices, held_items, location_area_encounters, stats, types` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.base_experience, EXCLUDED.height, EXCLUDED.is_default, EXCLUDED.weight, EXCLUDED.ability, EXCLUDED.forms, EXCLUDED.game_indices, EXCLUDED.held_items, EXCLUDED.location_area_encounters, EXCLUDED.stats, EXCLUDED.types` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.Name, p.BaseExperience, p.Height, p.IsDefault, p.Weight, p.Ability, p.Forms, p.GameIndices, p.HeldItems, p.LocationAreaEncounters, p.Stats, p.Types)
	_, err = db.Exec(sqlstr, p.ID, p.Name, p.BaseExperience, p.Height, p.IsDefault, p.Weight, p.Ability, p.Forms, p.GameIndices, p.HeldItems, p.LocationAreaEncounters, p.Stats, p.Types)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Pokemon from the database.
func (p *Pokemon) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.pokemon WHERE id = $1`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// GetAllPokemons returns all rows from 'public.pokemon',
// ordered by "created_at" in descending order.
func GetAllPokemons(db XODB) ([]*Pokemon, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.pokemon`

	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Pokemon
	for q.Next() {
		p := Pokemon{}

		// scan
		err = q.Scan(&p.ID, &p.Name, &p.BaseExperience, &p.Height, &p.IsDefault, &p.Weight, &p.Ability, &p.Forms, &p.GameIndices, &p.HeldItems, &p.LocationAreaEncounters, &p.Stats, &p.Types)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// GetChunkedPokemons returns pagingated rows from 'public.pokemon',
// ordered by "created_at" in descending order.
func GetChunkedPokemons(db XODB, limit int, offset int) ([]*Pokemon, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.pokemon LIMIT $1 OFFSET $2`

	q, err := db.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Pokemon
	for q.Next() {
		p := Pokemon{}

		// scan
		err = q.Scan(&p.ID, &p.Name, &p.BaseExperience, &p.Height, &p.IsDefault, &p.Weight, &p.Ability, &p.Forms, &p.GameIndices, &p.HeldItems, &p.LocationAreaEncounters, &p.Stats, &p.Types)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PokemonByName retrieves a row from 'public.pokemon' as a Pokemon.
//
// Generated from index 'pokemon_name_key'.
func PokemonByName(db XODB, name sql.NullString) (*Pokemon, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, base_experience, height, is_default, weight, ability, forms, game_indices, held_items, location_area_encounters, stats, types ` +
		`FROM public.pokemon ` +
		`WHERE name = $1`

	// run query
	XOLog(sqlstr, name)
	p := Pokemon{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&p.ID, &p.Name, &p.BaseExperience, &p.Height, &p.IsDefault, &p.Weight, &p.Ability, &p.Forms, &p.GameIndices, &p.HeldItems, &p.LocationAreaEncounters, &p.Stats, &p.Types)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PokemonByID retrieves a row from 'public.pokemon' as a Pokemon.
//
// Generated from index 'pokemon_pkey'.
func PokemonByID(db XODB, id int) (*Pokemon, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, base_experience, height, is_default, weight, ability, forms, game_indices, held_items, location_area_encounters, stats, types ` +
		`FROM public.pokemon ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	p := Pokemon{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.Name, &p.BaseExperience, &p.Height, &p.IsDefault, &p.Weight, &p.Ability, &p.Forms, &p.GameIndices, &p.HeldItems, &p.LocationAreaEncounters, &p.Stats, &p.Types)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
